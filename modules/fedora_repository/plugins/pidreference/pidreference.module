<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing a Fedora item from a Drupal node.
 */

/**
 * Implementation of hook_menu().
 */
function pidreference_menu() {
  $items = array();
  $item['pidreference/autocomplete'] = array(
    'title' => 'pidrefrence autocomplete',
    'page callback' => 'pidreference_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function pidreference_theme() {
  return array(
    'pidreference_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'pidrefrence_buttons' => array(
      'arguments' => array('element' => NULL),
    ),
    'pidreference_autocomplete' => array(
      'arguments' => array('element' => NULL),
    ),
    'pidreference_formatter_default' => array(
      'arguments' => array('element'),
    ),
    'pidreference_formatter_plain' => array(
      'arguments' => array('element'),
    ),
    'pidreference_formatter_full' => array(
      'arguments' => array('element'),
      'function' => 'theme_pidreference_formatter_full_teaser',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function pidreference_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'relationships') {
    return 'panels/'. $plugin;
  }
}

/**
 * Implementation of hook_field_info().
 */
function pidreference_field_info() {
  return array(
    'pidreference' => array(
      'label' => t('PID reference'),
      'description' => t('Store the PID of a Fedora item as a string value'),
      'content_icon' => 'icon_content_noderef.png',
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function pidreference_field_settings($op, $field) {
  switch($op) {
    case 'form':
      $form = array();
      $form['referenceable_types'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Content types that can be referenced.',
        '#multiple' => TRUE,
        '#default_value' => is_array($field['referenceable_types']) ? $field['referenceable_types'] : array(),
        '#options' => array_map('check_plain', node_get_types('names')),
      );
      if (module_exists('views')) {
        $views = array('--' => '--');
        $all_views = views_get_all_views();
        foreach($all_views as $view) {
          // Only 'node' views that have fields will work for our purpose.
          if ($view->base_table == 'node' && !empty($view->display['default']->display_options['fields'])) {
            if ($view->type == 'default') {
              $views[t('Deafult Views')][$view->name] = $view->name;
            }
            else {
              $views[t('Existing Views')][$view->name] = $view->name;
            }
          }
        }
        
        $form['advanced'] = array(
          '#type' => 'fieldset',
          '#title' => t('Advanced - PIDs that can be referenced.'),
          '#collapsible' => TRUE,
          '#collapsed' => !isset($field['advanced_view']) || $field['advanced_view'] == '--',
        );
        if (count($views) > 1) {
          $form['advanced']['advanced_view'] = array(
            '#type' => 'select',
            '#title' => t('View used to select the PIDs'),
            '#options' => $views,
            '#default_value' => isset($field['advanced_view']) ? $field['advanced_view'] : '--',
            '#description' => t('<p>Choose the views module view that selects the PIDs that can be referenced.<br />Note:</p>').
            t('<ul><li>Only views that have fields will work for this purpose.</li></ul>'),
          );
          $form['advanced']['advanced_view_args'] = array(
            '#type' => 'textfield',
            '#title' => t('View arguments'),
            '#default_value' => isset($field['advanced_views_args']) ? $field['advanced_views_args'] : '',
            '#required' => FALSE,
            '#description' => t('Provide a comma-separated list of arguments to pass to the view'),
          );
        }
        else {
          $form['advanced']['no_view_help'] = array(
            '#value' => 'If you can read this alexander needs to remove some more code.',
          );
        }
      }
      return $form;
      
    case 'save':
      $settings = array('referenceable_types');
      if (module_exists('views')) {
        $settings[] = 'advanced_view';
        $settings[] = 'advanced_view_args';
      }
      return $settings;
      
    case 'database columns':
      $columns = array(
        'pid' => array('type' => 'string', 'not NULL' => FALSE),
      );
      return $columns;
      
    case 'views data':
      return NULL;
  }
}

/**
 * Implementation of hook_field().
 */
function pidreference_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // Extract PIDs to check
      $ids = array();
      foreach ($items as $delta => $item) {
        if (is_array($item) && !empty($item['pid'])) {
          $ids[] = $item['pid'];
        }
      }
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function pidreference_content_is_empty($item, $field) {
  if (empty($item['pid'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function nodereference_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Label (link)'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Label (no link).'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'full' => array(
      'label' => t('Full node'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'teaser' => array(
      'label' => t('Teaser'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for default pidreference field formatter.
 */
function theme_pidreference_formatter_plain($element) {
  $output = '';
  if (!empty($element['#item']['pid']) && ($label = _pidreference_labels($element['#item']['pid']))) {
    $output = check_plain($label);    
  }
  return $output;
}

/**
 * Proxy theme function for 'full' and 'teaser' pidreferences.
 */
function theme_pidreference_formatter_full_teaser($element) {
//  static $recursion_queue = array();
//  $output = '';
//  if (!empty($element['item']['pid'])) {
//    $pid = $element['pid'];
//    $field = content_fields($element['#field_name'], $element['#type_name']);
//    // If no referenceing node is set, we are starting a new reference thread.
//    if (!isset($pid->referencing_node)) {
//      $recursion_queue = array();
//    }
//    $recursion_queue[] = $pid->pid;
//  }
  return 'what?';
}

/**
 * Helper function for formatters. S
 * 
 * Store PID labels collected in the current request.
 */
function _pidreference_labels($pid, $known_title = NULL) {
  static $labels = array();
  if (!isset($labels['pid'])) {
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $newitem = new fedora_item($pid);
    $label = $known_label ? $knwon_label : $newitem->object_profile->objLabel;
    $labels['pid'] = $label ? $label : '';
  }
  return $labels['pid'];
}

/**
 * Implementation of hook_widget_info().
 * 
 * We need custom handling of multiple values for the pidreference_select
 * widget because we need to combine them into an options list rather
 * than display multiple elements.
 */
function pidreference_widget_info() {
  return array(
    'pidreference_select' => array(
      'label' => t('Select list'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'pidreference_buttons' => array(
      'label' => t('Check boxes/radio buttons'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'pidreference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('pidreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 * 
 * Any FAPI callbacks needed for individual widgets can be declared here.
 * and the element will be passed to these callbacks for processing.
 * 
 * Drupal will automatically theme the elements using a theme with
 * the same name as the hook_elements key.
 * 
 * Autocomplete_path is not used by text widget but other widgets can use it.
 */
function pidreference_elements() {
  return array(
    'pidreference_select' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('pidrefrence_select_process'),
    ),
    'pidreference_buttons' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('pidreference_buttons_process'),
    ),
    'pidreference_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('name'), '#delta' => 0,
      '#process' => array('pidreference_autocomplete_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings.
 */
function pidreference_widget_settings($op, $node) {
  switch($op) {
    case 'form':
      $form = array();
      $match = isset($widget['autocomplete_match']) ? $widget['autocomplete_match'] : 'contains';
      $size = isset($widget['size']) ? $widget['size'] : 60;
      if ($widget['type'] == 'pidreference_autocomplete' ) {
        $form['autocomplete_match'] = array(
          '#type' => 'select',
          '#title' => t('Autocomplete matching'),
          '#default_value' => $match,
          '#options' => array(
            'starts_with' => t('Starts with'),
            'contains' => t('Contains'),
          ),
          '#description' => 'Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance problems on sites with thousands of PIDs',
        );
      } else {
        $form['autocomplete_match'] = array('#type' => 'hidden', '#value' => $match);
        $form['size'] = array('#type' => 'hidden', '#value' => $size);
      }
      return $form;
      
    case 'save':
      return array('autocomplete_match', 'size');
  }
}

/**
 * Implementation of hook_widget().
 * 
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We built it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 * 
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 * 
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 * 
 * @param $form
 *   The entire form array. form['#node'] holds node information.
 * @param $form_state
 *   the $form_state, $form_state['values'][$field['field_name']]
 * @param $field  the field array
 * @param $items  array of default values for this field
 * @param $delta the order of theis item in the array of subelements (0, 1, 2, etc)
 * 
 * @return
 *   the form item for a single element for this field
 */
function pidreference_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch($field['widget']['type']) {
    case 'pidreference_select':
      $element = array(
        '#type' => 'pidreference_select',
        '#default_value' => $items,
      );
      break;
      
    case 'pidreference_buttons':
      $element = array(
        '#type' => 'pidreference_buttons',
        '#default_value' => $items,
      );
      break;
      
    case 'pidreference_autocomplete':
      $element = array(
        '#type' => 'pidreference_autocomplete',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
        '#value_callback' => 'pidreference_autocomplete_value',
      );
      break;
  }
  return $element;
}

/**
 * Value for a pidreference autocomplete element.
 */
function pidreference_autocomplete_value($element, $edit = FALSE) {
  $field_key = $element['#columns'][0];
  if (!empty($element['#default_value'][$field_key])) {
    $pid = $element['#default_value'][$field_key];
    $value = $pid;
    $value .= ' [pid:'. $pid .']';
    return array($field_key => $value);
  }
  return array($field_key => NULL);
}

/**
 * Process an individual element.
 * 
 * Build the form element when creating the form using FAPI #process,
 * note that $element['#value'] is already set.
 * 
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function pidreference_select_process($element, $edit, $form_state, $form) {
  // The pidreference_select widget doesn't need to create its own
  // element it can wrap around the optionwidgets_select element.
  // This will create a new, nested instance of the field.
  // Add a validation step where the value can be unwrapped.
  $field_key = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'optionwidgets_select',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'pidreference_optionwidgets_validate');
  return $element;
}

/**
 * Process an individual element.
 * 
 * Build the form element. When creating a form using FAPI #process
 * note that $element['#value'] is already set.
 * 
 * The $fields array is in $form['#field_info'][$element['#field_name']] 
 */
function pidreference_buttons_process($element, $edit, $form_state, $form) {
  // The pidreference_select widget doesn't need to creatae its own
  // element. It can wrap aroudn the optionwidgets_select element.
  // This will create a new, nested instance of the field.
  // Add a validation step where the value can be unwrapped.
  $field_key = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'optionwidgets_buttons',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columnt' => $element['#columns'], 
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'pidreference_optionwidgets_validate');
  return $element;
}

/**
 * Process an individual element.
 * 
 * Build the form element. When creating a form using FAPI #process
 * note that $element['#value'] is already set.
 */
function pidreference_autocomplete_process($element, $edit, $form_state, $form) {
  // The pidreference_autocomplete widget doesn't need to create its own
  // element. It can wrap around the text_textfield element and create an autocomplete
  // path and some extra processing to it.
  // Add a validation step where the value can be unwrapped.
  $field_key = $element['#columns'][0];
  
  $element[$field_key] = array(
    '#type' => 'text_textfield',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#autocomplete_path' => 'pidreference/autocomplete'.$element['#field_name'],
    // The following values were set by the content model and
    // need to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] - array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'pidreference_autocomplete_validate');
  
  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    // Wrapping the element around a text_textfield element creates a 
    // nested element, so the final id will look like 'field-name-0-pid-pid'.
    '#value' => implode('][', array_merge($element['#parents'], array($field_key, $field_key))),
  );
  return $element;
}

/**
 * Validate a select/buttons element.
 * 
 * Remove the wrapper layer and set the right element's value.
 * We don't know exactly where this element is, so we drill down
 * through the element until we get to our key.
 * 
 * We use $form_state['values'] instead of $element['#value']
 * to be sure we have the most accurate value when other moduels
 * like optionwidgets are using #element_validate to alter the value.
 */
function pidreference_optionwidgets_validate($element, &$form_state) {
  $field_key = $element['#columns'][0];
  
  $value = $form_state['values'];
  $new_parents = array();
  foreach( $element['#parents'] as $parent) {
    $value = $value[$parent];
    // use === to be sure we get right results if parent is a zero (delta) value.
    if ($parent === $field_key) {
      $element['#parents'] = $new_parents;
      form_set_value($element, $value, $form_state);
      break;
    }
    $form_parents[] = $parent;
  }
}

/**
 * Validate an autocomplete element.
 * 
 * Remove the wrapper layer and set the right element's value.
 * This will move the nested value of field-name-0-pid-pid
 * back to its original location, field-name-0-pid.
 */
function pidreference_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $type_name = $element['#type_name'];
  $fields = content_fields($field_name, $type_name);
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $value = $element['#value'][$field_key];
  $pid = NULL;
  if (!empty($values)) {
    preg_match('/^(?:\s*|(.*) )?\[\s*pid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit [pid:pid].
      list(, $title, $pid) = $matches;
    }
    else {
      // No explicit pid.
      $reference = _pidreference_potential_references($field, $value, 'equals', NULL, 1);
      if (empty($reference)) {
        form_error($element[$field_key], t('%name: found no valid item with that PID', array('%name' => t($field['widget']['label']))));
      }
      else {
        $pid = key($reference);
      }
    }
  }
  form_set_value($element, $pid, $form_state);
}

/**
 * Implementation of hook_allowed_values().
 */
function pidreference_allowed_values($field) {
  $references = _pidreference_allowed_values($field);
  
  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['rendered'];
  }
  return $options;
}

function _pidreference_potential_references($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  static $results = array();
  // Create unique id for static cache.
  $cid = $field['field_name'] . ':'. $match . ':'. ($string !== '' ? $string : implode('-', $ids)) . ':'. $limit;
  if (!isset($results[$cid])) {
    // Create unique ID for static cache.
    $references = _pidreference_potential_references_standard($field, $string, $match, $ids, $limit);
    // Store the results
    $results[$cid] = !empty($references) ? $references : array();
  }
  return $results[$cid];
}

/**
 * Helper function for pidreference_potential_references
 *
 * @param unknown_type $field
 * @param unknown_type $string
 * @param unknown_type $match
 * @param unknown_type $ids
 * @param unknown_type $limit
 */
function _pidreference_potential_references_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  module_load_include('inc', 'fedora_repository', 'fedora_item');

  $references = array();

  if (!empty($string)) {
    try {
      $references = Fedora_Item::find_objects_by_pattern($string);
    }
    catch (exception $e) {
      // This will jsut return an empty array, no need to do anything.
    }
  }

  return $references;
}

function pidreference_autocomplete($field_name, $string = '') {
  $fields = content_fields();
  $field = $fields[$field_name];
  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();

  $references = _pidreference_potential_references($field, $string, $match, array(), 10);
  foreach ($references as $id => $row) {
    $matches[$row['label'] . " [pid:$id]"] = '<div class="reference-autocomplete">'. $row['rendered'] . '</div>';
  }
  drupal_json($matches);
}

/**
 * Implementation of hook_node_types().
 * @param <type> $op
 * @param <type> $info
 */
function pidreference_node_types($op, $info) {
  switch($op) {
    case 'update':
      // Select type name changes to the referenceable types
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        // content.module's implementation of hook_node_types() has already
        // refreshed content_type_info().
        $fields = content_fields();
        foreach ($fields as $field_name => $field) {
          if ($field['type'] == 'pidreference' && isset($field['referenceabletypes'][$info->old_type])) {
            $field['referenceable_types'][$info->old_type] = empty($field['referenceable_types'][$info->old_type]) ? 0 : $info->type;
            unset($field['referenceable_types'][$info->old_type]);
            related_fields_instance_update($field);
          }
        }
      }
      break;
  }
}

function theme_pidreference_select($element) {
  return $element['#children'];
}

function theme_pidreference_buttons($element) {
  return $element['#children'];
}

function theme_pidreference_autocomplete($element) {
  return $element['#children'];
}
